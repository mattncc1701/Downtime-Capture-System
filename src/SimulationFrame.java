import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;

@SuppressWarnings("serial")
public class SimulationFrame extends JFrame
    implements WindowListener, ActionListener {

	// Tracks if the window is closed
	protected boolean windowClosed;
	
	// Simulation control buttons
	protected JButton startEventButton;
	protected JButton endEventButton;
	
	protected JTextField elapsedTimeBox;
	
	protected Timer eventTimer;
	
	protected EventDatabase newEvents;
	protected ListPanel newListPanel;
	
	public SimulationFrame(EventDatabase newEvents, ListPanel newListPanel) {
		super("Simulation Controller");
		
		this.newEvents = newEvents;
		this.newListPanel = newListPanel;
		// Setup window to specific size and to not be resizable
		setMinimumSize(new Dimension(
			DcsConstants.SIMULATION_FRAME_WIDTH, 
			DcsConstants.SIMULATION_FRAME_HEIGHT));
		setResizable(false);
		
		// Main vertical layout manager
		Box mainLayout = Box.createVerticalBox();
		mainLayout.add(Box.createRigidArea(new Dimension(0, 10))); // Add top margin
		add(mainLayout);
		
		// Simulation status layout manager
		Box statusLayout = Box.createHorizontalBox();
		statusLayout.setAlignmentX(LEFT_ALIGNMENT);
		
		// Add timer elapsed field
		statusLayout.add(Box.createRigidArea(new Dimension(10, 0)));
	    JLabel elaspedTimeLabel = new JLabel("Elasped Time: ");
	    statusLayout.add(elaspedTimeLabel);
		
		statusLayout.add(Box.createRigidArea(new Dimension(10, 0)));
		elapsedTimeBox = new JTextField();
		elapsedTimeBox.setEditable(false);
		elapsedTimeBox.setMaximumSize(new Dimension(75, 25));
		elapsedTimeBox.setMinimumSize(new Dimension(75, 25));
		statusLayout.add(elapsedTimeBox);
		
		// Button layout manager
		Box buttonLayout = Box.createHorizontalBox();
		buttonLayout.setAlignmentX(LEFT_ALIGNMENT);
		
		// Add start event button
		buttonLayout.add(Box.createRigidArea(new Dimension(10, 0))); // Add left margin
		startEventButton = new JButton("Start Event");
		startEventButton.addActionListener(this);
		startEventButton.setEnabled(true); // Default to enabled
		buttonLayout.add(startEventButton);
		
		// Add stop event button
		buttonLayout.add(Box.createRigidArea(new Dimension(10, 0))); // Add middle margin
		endEventButton = new JButton("End Event");
		endEventButton.addActionListener(this);
		endEventButton.setEnabled(false); // Default to disabled
		buttonLayout.add(endEventButton);
	
		// Add layouts to frame 
		mainLayout.add(statusLayout);
		mainLayout.add(Box.createRigidArea(new Dimension(0, 10))); // Add middle margin
		mainLayout.add(buttonLayout);

		eventTimer = new Timer();	
		windowClosed = false;
	} // ctor
	
	// Handle all event generated by various controls on the screen
	@Override
	public void actionPerformed(ActionEvent event) {
		
		// Check if start button pressed
		if (event.getSource() == startEventButton) {
			
			// TBD code to generate simulated event
			
			// Start elapsed timer
			eventTimer.start();
			// Enable/disabled buttons
			startEventButton.setEnabled(false);
			endEventButton.setEnabled(true);
		} // if
		
		// Check if end button pressed
		else if (event.getSource() == endEventButton) {
			
			// TBD code to generate simulated event
			newEvents.time = eventTimer.getElapsedTime();
			newEvents.loadUncompletedEvents();
			newListPanel.setEntries(newEvents.getListData());
			// Stop elapsed timer
			eventTimer.reset();
			
			// Enable/disabled buttons
			startEventButton.setEnabled(true);
			endEventButton.setEnabled(false);
		} // if
		
	} // actionPerformed	
	
	public void updateSimulationStatus() {
		elapsedTimeBox.setText(eventTimer.getElapsedTime());
	} // updateElapsedTime
	
	public boolean closed() {
		return windowClosed;
	} // closed
	
	@Override
	public void windowClosed(WindowEvent e) {
        windowClosed = true;
    } // windowClosed

	@Override
	public void windowActivated(WindowEvent arg0) {
	} // windowActivated

	@Override
	public void windowClosing(WindowEvent arg0) {	
		  // Finish closing the window
		  dispose();
	} // windowClosing

	@Override
	public void windowDeactivated(WindowEvent arg0) {	
	} // windowDeactivated

	@Override
	public void windowDeiconified(WindowEvent arg0) {
	} // windowDeiconified

	@Override
	public void windowIconified(WindowEvent arg0) {
	} // windowIconified

	@Override
	public void windowOpened(WindowEvent arg0) {
	} // windowOpened

} // DownTimeFrame
